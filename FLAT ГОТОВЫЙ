#include <iostream>
#include <Windows.h>
#include <time.h>
#include <stdlib.h>
#include <fstream>
#include <string>
#include <conio.h>
#include <iomanip>
#include <cassert>

using namespace std;
//class Fraction
//{
//	int numeratir;
//	int denominator;
//	int gcd(int a, int b);
//	void reduce();
//public:
//	Fraction(int num, int denom) :
//		numeratir{ num }, denominator{ denom }
//	{
//		reduce();
//	}
//	Fraction() : Fraction(1, 1) {}
//	void setNumerator(int num) { numeratir = num; reduce(); }
//	int getNumer()const { return numeratir; }
//	void setdenominator(int denom) { denominator = denom ? denom : 1; reduce(); }
//	int getDenumirator()const { return denominator; }
//	void print() const;
//};
//int Fraction::gcd(int a, int b)
//{
//	int copy;
//	while (b)
//	{
//		a %= b;
//		copy = a;
//		a = b;
//		b = copy;
//
//	}
//	return a;
//}
//void Fraction::reduce()
//{
//	int gsdVal{ gcd(numeratir, denominator) };
//	numeratir /= gsdVal;
//	denominator /= gsdVal;
//	if (denominator < 0 and numeratir < 0)
//	{
//		denominator *= -1;
//		numeratir *= -1;
//	}
//}
//void Fraction::print()const
//{
//	cout << '(' << numeratir << " / " << denominator << ')';
//}
//Fraction operator+(const Fraction& left,
//	const Fraction& right)
//{
//	return Fraction{ left.getNumer() *
//	right.getDenumirator() +
//	right.getNumer() *
//	left.getDenumirator(),
//	left.getDenumirator() *
//	right.getDenumirator() };
//}
//Fraction operator+(const Fraction& left, int right)
//{
//	return Fraction{ left.getNumer() + right *
//	left.getDenumirator(),
//	left.getDenumirator() };
//}
//Fraction operator+(int left, const Fraction& right)
//{
//	return right + left;
//}
//Fraction operator-(const Fraction& left,
//	const Fraction& right)
//{
//	return Fraction{ left.getNumer() *
//	right.getDenumirator() -
//	right.getNumer() *
//	left.getDenumirator(), left.getDenumirator() *
//	right.getDenumirator() };
//}
//Fraction operator-(const Fraction& left, int right)
//{
//	return Fraction{ left.getNumer() - right *
//	left.getDenumirator(),
//	left.getDenumirator() };
//}
//Fraction operator-(int left, const Fraction& right)
//{
//	return Fraction{ left * right.getDenumirator() -
//	right.getNumer(),
//	right.getDenumirator() };
//}
//Fraction operator*(const Fraction& left,
//	const Fraction& right)
//{
//	return Fraction{ left.getNumer() *

class Flat
{
	double ploshad;
	double cena;
public:
	Flat(double nPloshad, double nCena) :
		ploshad{ nPloshad }, cena{ nCena } {}
	Flat() : Flat(0.13, 0.64) {}

	Flat& operator=(Flat&& object)
	{

		ploshad = object.ploshad;
		cena = object.cena;
		object.ploshad = 0;
		object.cena = 0;
	}
	friend bool operator== (const Flat& l, const Flat& r);
	friend bool operator > (const Flat& l, const Flat& r);
};
bool operator == (const Flat& l, const Flat& r)
{
	return (l.ploshad == r.ploshad);
}
bool operator>(const Flat& l, const Flat& r)
{
	return(l.cena > r.cena);
}
int main()
{
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);
	srand(time(NULL));
	
	Flat a(1.12, 2.36);
	Flat b(1.98,0.36);
	bool c = a > b;
	cout << c;
}
